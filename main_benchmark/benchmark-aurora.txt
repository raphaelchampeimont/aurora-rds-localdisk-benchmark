-- Create the table which will receive test data
DROP TABLE IF EXISTS benchmark;
DROP TABLE
CREATE TABLE benchmark (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write benchmark (5 x 2E7 rows = 100 M rows)
-- We use constant values so that the CPU is as least used as possible
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=108489.117..108489.118 rows=0 loops=1)
   Buffers: shared hit=20851061 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3093.265..9102.752 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.062 ms
 Execution Time: 108527.560 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=110524.585..110524.585 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3459.439..9261.073 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.051 ms
 Execution Time: 110562.311 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=111250.138..111250.139 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3058.214..8684.971 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.052 ms
 Execution Time: 111287.921 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=109186.135..109186.137 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3078.998..8950.213 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.052 ms
 Execution Time: 109224.135 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=108759.167..108759.168 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3078.190..8641.238 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.055 ms
 Execution Time: 108796.815 ms
(8 rows)

-- Print table size
SELECT pg_size_pretty( pg_relation_size('benchmark'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- VACUUM table manually (since we disabled autovacuum)
VACUUM ANALYZE benchmark;
VACUUM
-- Here we write a second table so that the first table gets removed from the cache
-- (the second table has a size >= the entire RAM of the machine)
DROP TABLE IF EXISTS benchmark2;
DROP TABLE
CREATE TABLE benchmark2 (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write to second table
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=110195.867..110195.868 rows=0 loops=1)
   Buffers: shared hit=20851061 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3398.559..8854.927 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.063 ms
 Execution Time: 110261.539 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=111233.533..111233.534 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3058.689..8740.150 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.049 ms
 Execution Time: 111278.770 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=111639.396..111639.397 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3105.501..9036.468 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.070 ms
 Execution Time: 111680.888 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=109751.592..109751.593 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3085.337..8957.552 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.051 ms
 Execution Time: 109789.711 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=111618.291..111618.292 rows=0 loops=1)
   Buffers: shared hit=20851064 read=425532, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3101.757..8733.687 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.052 ms
 Execution Time: 111656.412 ms
(8 rows)

-- Print second table size
SELECT pg_size_pretty( pg_relation_size('benchmark2'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- Perform the read benchmark on the first table
-- With cold cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=1.436..71559.983 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared read=2127660
   I/O Timings: read=19.971
 Planning Time: 23.551 ms
 Execution Time: 83111.462 ms
(6 rows)

-- Run it 5 times more now that the cache is hot to measure read time with hot cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=1.390..68914.033 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=8192 read=2119468
   I/O Timings: read=14.234
 Planning Time: 0.028 ms
 Execution Time: 80277.820 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=2.105..74919.606 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=16384 read=2111276
   I/O Timings: read=16.155
 Planning Time: 0.031 ms
 Execution Time: 86014.223 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=3.118..87661.160 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=24576 read=2103084
   I/O Timings: read=20.303
 Planning Time: 0.030 ms
 Execution Time: 98814.383 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=1.436..69036.075 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=32768 read=2094892
   I/O Timings: read=24.578
 Planning Time: 0.031 ms
 Execution Time: 80113.717 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=1.506..74430.956 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=40960 read=2086700
   I/O Timings: read=15.548
 Planning Time: 0.030 ms
 Execution Time: 85583.482 ms
(6 rows)

