-- Create the table which will receive test data
DROP TABLE IF EXISTS benchmark;
DROP TABLE
CREATE TABLE benchmark (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write benchmark (5 x 2E7 rows = 100 M rows)
-- We use constant values so that the CPU is as least used as possible
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=69483.772..69483.772 rows=0 loops=1)
   Buffers: shared hit=20850955 read=425638 dirtied=425637 written=382036, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2867.313..5732.704 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.056 ms
 Execution Time: 69517.095 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=71549.714..71549.714 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637 written=398237, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2864.875..5667.691 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.049 ms
 Execution Time: 71582.298 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=65258.877..65258.877 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636 written=400011, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2865.507..5670.839 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.046 ms
 Execution Time: 65291.449 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=70043.498..70043.498 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637 written=398572, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2866.139..5667.878 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.046 ms
 Execution Time: 70076.026 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=64411.586..64411.587 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636 written=399717, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2866.315..5686.608 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.047 ms
 Execution Time: 64444.024 ms
(8 rows)

-- Print table size
SELECT pg_size_pretty( pg_relation_size('benchmark'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- VACUUM table manually (since we disabled autovacuum)
VACUUM ANALYZE benchmark;
VACUUM
-- Here we write a second table so that the first table gets removed from the cache
-- (the second table has a size >= the entire RAM of the machine)
DROP TABLE IF EXISTS benchmark2;
DROP TABLE
CREATE TABLE benchmark2 (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write to second table
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=68734.463..68734.463 rows=0 loops=1)
   Buffers: shared hit=20850955 read=425638 dirtied=425637 written=398469, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2889.065..5640.239 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.044 ms
 Execution Time: 68768.015 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=64503.843..64503.843 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637 written=399642, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2868.780..5575.055 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.048 ms
 Execution Time: 64536.484 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=70441.350..70441.350 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636 written=397572, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2867.212..5598.476 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.046 ms
 Execution Time: 70475.080 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=65379.256..65379.256 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637 written=399889, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2864.161..5567.494 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.048 ms
 Execution Time: 65411.925 ms
(8 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=72772.955..72772.955 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636 written=396851, temp read=41501 written=41501
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=2864.384..6131.243 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.062 ms
 Execution Time: 72806.093 ms
(8 rows)

-- Print second table size
SELECT pg_size_pretty( pg_relation_size('benchmark2'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- Perform the read benchmark on the first table
-- With cold cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=2.371..128242.748 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared read=2127660 written=15
 Planning Time: 3.323 ms
 Execution Time: 132622.385 ms
(5 rows)

-- Run it 5 times more now that the cache is hot to measure read time with hot cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.468..125781.442 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=32 read=2127628
 Planning Time: 0.029 ms
 Execution Time: 130149.088 ms
(5 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.547..124515.407 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=64 read=2127596
 Planning Time: 0.030 ms
 Execution Time: 128896.008 ms
(5 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.605..123140.529 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=96 read=2127564
 Planning Time: 0.030 ms
 Execution Time: 127512.784 ms
(5 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.543..123766.024 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=128 read=2127532
 Planning Time: 0.029 ms
 Execution Time: 128129.436 ms
(5 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.888..123458.831 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=160 read=2127500
 Planning Time: 0.031 ms
 Execution Time: 127822.665 ms
(5 rows)

