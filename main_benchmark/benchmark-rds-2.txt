-- Create the table which will receive test data
DROP TABLE IF EXISTS benchmark;
DROP TABLE
CREATE TABLE benchmark (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write benchmark (5 x 2E7 rows = 100 M rows)
-- We use constant values so that the CPU is as least used as possible
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=34239.574..34239.575 rows=0 loops=1)
   Buffers: shared hit=20850955 read=425638 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.241
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3629.325..6784.685 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.064 ms
 Execution Time: 34273.988 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=31654.431..31654.432 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.281
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3560.321..7428.658 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.077 ms
 Execution Time: 31692.772 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=29398.813..29398.813 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636, temp read=41501 written=41501
   I/O Timings: read=0.277
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3119.632..6748.183 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.050 ms
 Execution Time: 29431.678 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=30421.627..30421.628 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.280
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3593.376..7316.686 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.050 ms
 Execution Time: 30454.657 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark  (cost=0.00..10.00 rows=1000 width=200) (actual time=31279.458..31279.458 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636, temp read=41501 written=41501
   I/O Timings: read=0.274
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3424.728..7212.834 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.051 ms
 Execution Time: 31325.818 ms
(9 rows)

-- Print table size
SELECT pg_size_pretty( pg_relation_size('benchmark'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- VACUUM table manually (since we disabled autovacuum)
VACUUM ANALYZE benchmark;
VACUUM
-- Here we write a second table so that the first table gets removed from the cache
-- (the second table has a size >= the entire RAM of the machine)
DROP TABLE IF EXISTS benchmark2;
DROP TABLE
CREATE TABLE benchmark2 (
    d1 double precision,
    d2 double precision,
    d3 double precision,
    d4 double precision,
    d5 double precision,
    s1 text,
    s2 text,
    s3 text,
    s4 text,
    s5 text
)
-- We don't want autovacuum to run at a random moment in our benchmark
WITH (autovacuum_enabled = false);
CREATE TABLE
-- Write to second table
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=30830.522..30830.523 rows=0 loops=1)
   Buffers: shared hit=20850955 read=425638 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.281
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3091.781..7260.331 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.049 ms
 Execution Time: 30867.230 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=31589.502..31589.503 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.283
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3387.475..7466.474 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.086 ms
 Execution Time: 31631.882 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=31082.619..31082.620 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636, temp read=41501 written=41501
   I/O Timings: read=0.283
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3028.357..7133.194 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.050 ms
 Execution Time: 31128.602 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=30216.126..30216.127 rows=0 loops=1)
   Buffers: shared hit=20850959 read=425637 dirtied=425637, temp read=41501 written=41501
   I/O Timings: read=0.273
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3072.910..7049.969 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.050 ms
 Execution Time: 30251.814 ms
(9 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) INSERT INTO benchmark2 SELECT 0.5487519831907406, 0.4872935938111851, 0.49332102249181675, 0.7625924579550725, 0.05153777115574787, '0.9926690628615165', '0.018826968012793932', '0.4878975579926579', '0.5737164736350058', '0.9911040422334372' FROM generate_series(1, 2E7) AS v;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.benchmark2  (cost=0.00..10.00 rows=1000 width=200) (actual time=31477.325..31477.327 rows=0 loops=1)
   Buffers: shared hit=20850960 read=425636 dirtied=425636, temp read=41501 written=41501
   I/O Timings: read=0.289
   ->  Function Scan on pg_catalog.generate_series v  (cost=0.00..10.00 rows=1000 width=200) (actual time=3584.746..7697.463 rows=20000000 loops=1)
         Output: '0.548751983190741'::double precision, '0.487293593811185'::double precision, '0.493321022491817'::double precision, '0.762592457955072'::double precision, '0.0515377711557479'::double precision, '0.9926690628615165'::text, '0.018826968012793932'::text, '0.4878975579926579'::text, '0.5737164736350058'::text, '0.9911040422334372'::text
         Function Call: generate_series('1'::numeric, '20000000'::numeric)
         Buffers: temp read=41501 written=41501
 Planning Time: 0.050 ms
 Execution Time: 31522.577 ms
(9 rows)

-- Print second table size
SELECT pg_size_pretty( pg_relation_size('benchmark2'));
 pg_size_pretty 
----------------
 16 GB
(1 row)

-- Perform the read benchmark on the first table
-- With cold cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.749..27776.258 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared read=2127660
   I/O Timings: read=18683.213
 Planning Time: 1.017 ms
 Execution Time: 32378.633 ms
(6 rows)

-- Run it 5 times more now that the cache is hot to measure read time with hot cache
EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.307..23259.002 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=32 read=2127628
   I/O Timings: read=14002.183
 Planning Time: 0.030 ms
 Execution Time: 27937.613 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.363..24082.808 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=64 read=2127596
   I/O Timings: read=14904.181
 Planning Time: 0.031 ms
 Execution Time: 28732.214 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.347..24197.359 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=96 read=2127564
   I/O Timings: read=14885.425
 Planning Time: 0.031 ms
 Execution Time: 28918.319 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=0.530..25690.684 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=128 read=2127532
   I/O Timings: read=16482.587
 Planning Time: 0.030 ms
 Execution Time: 30358.198 ms
(6 rows)

EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS) SELECT * FROM benchmark;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.benchmark  (cost=0.00..3127660.16 rows=100000016 width=137) (actual time=3.280..32276.660 rows=100000000 loops=1)
   Output: d1, d2, d3, d4, d5, s1, s2, s3, s4, s5
   Buffers: shared hit=160 read=2127500
   I/O Timings: read=23204.057
 Planning Time: 0.031 ms
 Execution Time: 36886.069 ms
(6 rows)

